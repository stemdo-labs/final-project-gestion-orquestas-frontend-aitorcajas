name: Build

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extraer versión
        id: version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Extract sonar.projectKey
        id: project_key
        run: |
          KEY=$(grep -oP '^sonar.projectKey=\K.*' sonar-project.properties)
          echo "KEY=$KEY" >> $GITHUB_OUTPUT

      - uses: sonarsource/sonarqube-scan-action@v4
        with:
          args: >
            -Dsonar.projectVersion=${{ steps.version.outputs.VERSION }}
            -Dsonar.qualitygate.wait=true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_USER_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        continue-on-error: true

      - name: Generar reporte
        run: |
          curl -u ${{ secrets.SONAR_USER_TOKEN }}: "${{ secrets.SONAR_HOST_URL }}/api/project_analyses/search?project=${{ steps.project_key.outputs.KEY }}" > report.json
          cat report.json | jq . > analyses.json
          jq '.analyses[] | select(.projectVersion == "${{ steps.version.outputs.VERSION }}")' analyses.json > sonar-report.json

      - name: Upload SonarQube report artifact
        uses: actions/upload-artifact@v3
        with:
          name: sonar-report
          path: sonar-report.json

      - name: Análisis del reporte
        run: |
          SONAR_REPORT=sonar-report.json

          # Verificar si el archivo existe
          if [ ! -f "$SONAR_REPORT" ]; then
            echo "No se encontró el reporte de SonarQube en la ruta especificada. Pipeline abortada."
            exit 1
          fi

          # Verificar si hay una vulnerabilidad
          if jq -e '.[] | select(.events[]? | .category == "VULNERABILITY")' "$SONAR_REPORT" > /dev/null; then
            echo "Vulnerabilidades encontradas. Pipeline abortada."
            exit 1
          fi

          # Verificar si hay un bug
          if jq -e '.[] | select(.events[]? | .category == "BUG")' "$SONAR_REPORT" > /dev/null; then
            echo "Bugs encontrados. Pipeline abortada."
            exit 1
          fi

          # Verificar si hay un code smell
          if jq -e '.[] | select(.events[]? | .category == "CODE_SMELL")' "$SONAR_REPORT" > /dev/null; then
            echo "Code smell encontrado. Pipeline abortada."
            exit 1
          fi

          # Verificar si hay código duplicado
          if jq -e '.[] | select(.events[]? | .rule == "duplicated_code")' "$SONAR_REPORT" > /dev/null; then
            echo "Código duplicado. Pipeline abortada."
            exit 1
          fi

          # Verificar si la cobertura de pruebas es menor a 80
          if jq -e '.[] | select(.metrics[]? | .key == "coverage" and (.value | tonumber) < 80)' "$SONAR_REPORT" > /dev/null; then
            echo "Baja cobertura de pruebas. Pipeline abortada."
            exit 1
          fi

          # Verificar si hay una Quality Gate fallida
          if jq -e '.[] | select(.events[]? | .category == "QUALITY_GATE" and .name == "Failed")' "$SONAR_REPORT" > /dev/null; then
            echo "Quality Gate fallida. Pipeline abortada."
            exit 1
          fi

          echo "El reporte de SonarQube está limpio. Continuando con el despliegue."