pipeline {
    agent {
      // kubernetes {
      //       label 'jenkins-jenkins-agent'
      //       defaultContainer 'dind'
      //   }

        kubernetes {
            label 'jenkins-agent-acajas'
            defaultContainer 'jenkins-acajas'
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: jenkins-acajas
      image: jooeel98/agente-jenkins:0.3.1
      command:
      - cat
      tty: true
      securityContext:
        privileged: true
      volumeMounts:
      - mountPath: "/home/jenkins/agent"
        name: workspace-volume
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
  - emptyDir: {}
    name: bin-volume
  - emptyDir:
      medium: ""
    name: workspace-volume

"""
        }
    }

    stages {
        // stage('Preparar Entorno') {
        //   steps{
        //       sh '''
        //           apt-get update && apt-get install -y curl bash git docker.io
        //           curl -fsSL https://clis.cloud.ibm.com/install/linux | bash
        //           ibmcloud plugin install container-registry -r 'IBM Cloud'
        //           dockerd > /var/log/dockerd.log 2>&1 &
        //           sleep 10
        //           docker version
        //           ibmcloud --version
        //           ibmcloud plugin list
        //       '''
        //   }
        // }
        stage('Sleep') {
          steps{
            sh 'sleep 300s'
          }
        }

        stage('Checkout') {
          steps {
            checkout scm
          }
        }

        stage('Clonar repositorio principal') {
            steps {
                script {
                    dir('repo-principal') {
                        git branch: 'develop', url: 'https://github.com/stemdo-labs/iac-ibmcloud-aitorcajas.git'
                    }
                }
            }
        }

        stage('Entorno') {
            steps {
                script {
                    def environment = load 'repo-principal/vars/environment.groovy'
                    environment.environment()
                }
            }
        }

        stage('CI') {
            steps {
                script {
                    def repoName = env.REPO_NAME ?: sh(script: "echo ${env.GIT_URL} | awk -F'/' '{print \$NF}' | sed 's/.git\$//'", returnStdout: true).trim()
                    env.REPO = repoName
                    build job: 'ci', parameters: [
                      string(name: 'desarrollo', value: env.DEVELOPMENT),
                      string(name: 'entorno', value: env.ENVIRONMENT),
                      string(name: 'repo', value: env.REPO)
                    ]
                }
            }
        }

        stage('CD') {
            steps {
                script {
                    def repoName = env.REPO_NAME ?: sh(script: "echo ${env.GIT_URL} | awk -F'/' '{print \$NF}' | sed 's/.git\$//'", returnStdout: true).trim()
                    env.REPO = repoName
                    build job: 'cd', parameters: [
                      string(name: 'desarrollo', value: env.DEVELOPMENT),
                      string(name: 'repo', value: env.REPO)
                    ]
                }
            }
        }
    }
}